<STATEMENT EXECUTE="ALWAYS">
SET client_encoding = 'UNICODE';
SET check_function_bodies = false;
SET client_min_messages = warning;
SET default_with_oids = true;
</STATEMENT>
<STATEMENT EXECUTE="NEW">
CREATE SCHEMA ${SCHEMA};
ALTER SCHEMA ${SCHEMA} OWNER TO ${OWNER};
</STATEMENT>
<STATEMENT  EXECUTE="ALWAYS">
SET search_path = ${SCHEMA}, pg_catalog;
</STATEMENT>
<STATEMENT EXECUTE="NEW" VERSION="1">
CREATE TABLE alert_address (
    address_id integer NOT NULL,
    address_name character varying(50),
    address character varying(50),
    max_message_length smallint
);
ALTER TABLE ${SCHEMA}.alert_address OWNER TO ${OWNER};
CREATE TABLE alert_subscription (
    project_id integer,
    job_id character varying(60),
    address_id integer,
    all_errors character varying(1),
    subject_prefix character varying(55)
);
ALTER TABLE ${SCHEMA}.alert_subscription OWNER TO ${OWNER};
CREATE TABLE id_generator (
    id_name character varying(50),
    start_value bigint,
    current_value bigint
);
ALTER TABLE ${SCHEMA}.id_generator OWNER TO ${OWNER};
CREATE TABLE job (
    job_id character varying(60) NOT NULL,
    job_type_id integer NOT NULL,
    parameter_list_id integer,
    project_id integer,
    name character varying(100),
    description character varying(4000),
    retry_attempts integer,
    seconds_before_retry integer,
    disable_alerting character varying(1),
    "action" text,
    old_action2 bytea
);
ALTER TABLE ${SCHEMA}.job OWNER TO ${OWNER};
CREATE TABLE job_dependencie (
    job_id character varying(60) NOT NULL,
    parent_job_id character varying(60) NOT NULL,
    continue_if_failed character(1) NOT NULL
);
ALTER TABLE ${SCHEMA}.job_dependencie OWNER TO ${OWNER};
CREATE TABLE job_error (
    dm_load_id integer NOT NULL,
    job_id character varying(60),
    message character varying(1000),
    code character varying(20),
    error_datetime timestamp without time zone
);
ALTER TABLE ${SCHEMA}.job_error OWNER TO ${OWNER};
CREATE TABLE job_error_hist (
    dm_load_id integer NOT NULL,
    job_id character varying(60),
    message character varying(1000),
    code character varying(20),
    error_datetime timestamp without time zone,
    details character varying(4000),
    step_name character varying(255)
);
ALTER TABLE ${SCHEMA}.job_error_hist OWNER TO ${OWNER};
CREATE TABLE job_executor (
    job_executor_id integer NOT NULL,
    class_name character varying(50)
);
ALTER TABLE ${SCHEMA}.job_executor OWNER TO ${OWNER};
CREATE TABLE job_executor_job_type (
    job_executor_id integer NOT NULL,
    job_type_id integer NOT NULL
);
ALTER TABLE ${SCHEMA}.job_executor_job_type OWNER TO ${OWNER};
CREATE TABLE job_log (
    job_id character varying(60) NOT NULL,
    load_id integer NOT NULL,
    start_date timestamp without time zone,
    status_id int2,
    end_date timestamp without time zone,
    message character varying(2000),
    dm_load_id integer NOT NULL,
    retry_attempts integer,
    execution_date timestamp without time zone,
    server_id integer
);
ALTER TABLE ${SCHEMA}.job_log OWNER TO ${OWNER};
CREATE TABLE job_log_hist (
    job_id character varying(60) NOT NULL,
    load_id integer NOT NULL,
    start_date timestamp without time zone,
    status_id int2,
    end_date timestamp without time zone,
    message character varying(2000),
    dm_load_id integer NOT NULL,
    retry_attempts integer,
    execution_date timestamp without time zone,
    server_id integer
);
ALTER TABLE ${SCHEMA}.job_log_hist OWNER TO ${OWNER};
CREATE TABLE job_qa_hist (
    job_id character varying(60) NOT NULL,
    qa_id character varying(255) NOT NULL,
    qa_type character varying(28) NOT NULL,
    step_name character varying(255) NOT NULL,
    details character varying(4000) NOT NULL,
    record_date timestamp without time zone NOT NULL
);
ALTER TABLE ${SCHEMA}.job_qa_hist OWNER TO ${OWNER};
CREATE TABLE job_schedule (
    schedule_id integer NOT NULL,
    job_id character varying(60) NOT NULL,
    "month" integer,
    month_of_year integer,
    "day" integer,
    day_of_week integer,
    day_of_month integer,
    hour_of_day integer,
    "hour" integer,
    next_run_date timestamp without time zone,
    schedule_desc character varying(255),
    minute_of_hour integer,
    "minute" integer
);
ALTER TABLE ${SCHEMA}.job_schedule OWNER TO ${OWNER};
CREATE TABLE job_status (
    status_id int2 NOT NULL,
    status_desc character varying(30)
);
ALTER TABLE ${SCHEMA}.job_status OWNER TO ${OWNER};
CREATE TABLE job_type (
    job_type_id integer NOT NULL,
    description character varying(20),
    class_name character varying(50)
);
ALTER TABLE ${SCHEMA}.job_type OWNER TO ${OWNER};
CREATE TABLE "load" (
    load_id integer NOT NULL,
    start_job_id character varying(60),
    start_date timestamp without time zone,
    project_id integer,
    end_date timestamp without time zone,
    ignored_parents character(1),
    failed character(1)
);
ALTER TABLE ${SCHEMA}."load" OWNER TO ${OWNER};
CREATE SEQUENCE load_id
    INCREMENT BY 1
    NO MAXVALUE
    MINVALUE 0
    CACHE 1;
ALTER TABLE ${SCHEMA}.load_id OWNER TO ${OWNER};
CREATE TABLE mail_server_detail (
    mailserver_id integer NOT NULL,
    hostname character varying(256),
    login character varying(256),
    pwd character varying(256),
    from_address character varying(50)
);
ALTER TABLE ${SCHEMA}.mail_server_detail OWNER TO ${OWNER};
CREATE TABLE parameter (
    parameter_id integer NOT NULL,
    parameter_list_id integer,
    parameter_name character varying(50),
    parameter_value character varying(4000),
    sub_parameter_list_id integer,
    sub_parameter_list_name character varying(50)
);
ALTER TABLE ${SCHEMA}.parameter OWNER TO ${OWNER};
CREATE TABLE parameter_list (
    parameter_list_id integer NOT NULL,
    parameter_list_name character varying(255) NOT NULL
);
ALTER TABLE ${SCHEMA}.parameter_list OWNER TO ${OWNER};
CREATE TABLE project (
    project_id integer NOT NULL,
    project_desc character varying(255)
);
ALTER TABLE ${SCHEMA}.project OWNER TO ${OWNER};
CREATE TABLE server (
    server_id integer NOT NULL,
    server_name character varying(256) NOT NULL,
    status_id integer NOT NULL,
    shutdown_now character(1),
    start_time timestamp without time zone,
    shutdown_time timestamp without time zone,
    last_ping_time timestamp without time zone
);
ALTER TABLE ${SCHEMA}.server OWNER TO ${OWNER};
CREATE TABLE server_executor (
    server_id integer NOT NULL,
    job_executor_id integer NOT NULL,
    threads integer,
    queue_size integer
);
ALTER TABLE ${SCHEMA}.server_executor OWNER TO ${OWNER};
CREATE SEQUENCE server_id
    INCREMENT BY 1
    NO MAXVALUE
    MINVALUE 0
    CACHE 1;
ALTER TABLE ${SCHEMA}.server_id OWNER TO ${OWNER};
CREATE TABLE server_status (
    status_id integer NOT NULL,
    status_desc character varying(50) NOT NULL
);
ALTER TABLE ${SCHEMA}.server_status OWNER TO ${OWNER};
ALTER TABLE ONLY alert_address
    ADD CONSTRAINT alert_address_pkey PRIMARY KEY (address_id);
ALTER INDEX ${SCHEMA}.alert_address_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_dependencie
    ADD CONSTRAINT job_dependencie_pkey PRIMARY KEY (job_id, parent_job_id);
ALTER INDEX ${SCHEMA}.job_dependencie_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_executor_job_type
    ADD CONSTRAINT job_executor_job_type_pkey PRIMARY KEY (job_executor_id, job_type_id);
ALTER INDEX ${SCHEMA}.job_executor_job_type_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_executor
    ADD CONSTRAINT job_executor_pkey PRIMARY KEY (job_executor_id);
ALTER INDEX ${SCHEMA}.job_executor_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_log_hist
    ADD CONSTRAINT job_log_hist_job_id_key UNIQUE (job_id, load_id);
ALTER INDEX ${SCHEMA}.job_log_hist_job_id_key OWNER TO ${OWNER};
ALTER TABLE ONLY job_log_hist
    ADD CONSTRAINT job_log_hist_pkey PRIMARY KEY (dm_load_id);
ALTER INDEX ${SCHEMA}.job_log_hist_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_log
    ADD CONSTRAINT job_log_job_id_key UNIQUE (job_id, load_id);
ALTER INDEX ${SCHEMA}.job_log_job_id_key OWNER TO ${OWNER};
ALTER TABLE ONLY job_log
    ADD CONSTRAINT job_log_pkey PRIMARY KEY (dm_load_id);
ALTER INDEX ${SCHEMA}.job_log_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job
    ADD CONSTRAINT job_pkey PRIMARY KEY (job_id);
ALTER INDEX ${SCHEMA}.job_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_schedule
    ADD CONSTRAINT job_schedule_pkey PRIMARY KEY (schedule_id);
ALTER INDEX ${SCHEMA}.job_schedule_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_status
    ADD CONSTRAINT job_status_pkey PRIMARY KEY (status_id);
ALTER INDEX ${SCHEMA}.job_status_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY job_type
    ADD CONSTRAINT job_type_pkey PRIMARY KEY (job_type_id);
ALTER INDEX ${SCHEMA}.job_type_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY "load"
    ADD CONSTRAINT load_pkey PRIMARY KEY (load_id);
ALTER INDEX ${SCHEMA}.load_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY mail_server_detail
    ADD CONSTRAINT mail_server_detail_pkey PRIMARY KEY (mailserver_id);
ALTER INDEX ${SCHEMA}.mail_server_detail_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY parameter_list
    ADD CONSTRAINT parameter_list_pkey PRIMARY KEY (parameter_list_id);
ALTER INDEX ${SCHEMA}.parameter_list_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY parameter
    ADD CONSTRAINT parameter_pkey PRIMARY KEY (parameter_id);
ALTER INDEX ${SCHEMA}.parameter_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY project
    ADD CONSTRAINT project_pkey PRIMARY KEY (project_id);
ALTER INDEX ${SCHEMA}.project_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY server_executor
    ADD CONSTRAINT server_executor_pkey PRIMARY KEY (server_id, job_executor_id);
ALTER INDEX ${SCHEMA}.server_executor_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY server
    ADD CONSTRAINT server_pkey PRIMARY KEY (server_id);
ALTER INDEX ${SCHEMA}.server_pkey OWNER TO ${OWNER};
ALTER TABLE ONLY server_status
    ADD CONSTRAINT server_status_pkey PRIMARY KEY (status_id);
ALTER INDEX ${SCHEMA}.server_status_pkey OWNER TO ${OWNER};
CREATE INDEX job_id_dep_idx ON job_dependencie USING btree (job_id);
ALTER INDEX ${SCHEMA}.job_id_dep_idx OWNER TO ${OWNER};
CREATE UNIQUE INDEX op_dep_idx ON job_dependencie USING btree (parent_job_id, job_id);
ALTER INDEX ${SCHEMA}.op_dep_idx OWNER TO ${OWNER};
CREATE INDEX par_job_id_dep_idx ON job_dependencie USING btree (parent_job_id);
ALTER INDEX ${SCHEMA}.par_job_id_dep_idx OWNER TO ${OWNER};
CREATE UNIQUE INDEX pk_job_qa_history ON job_qa_hist USING btree (job_id, qa_id, qa_type, step_name, record_date);
ALTER INDEX ${SCHEMA}.pk_job_qa_history OWNER TO ${OWNER};
CREATE INDEX xie1job_log ON job_log USING btree (status_id);
ALTER INDEX ${SCHEMA}.xie1job_log OWNER TO ${OWNER};
ALTER TABLE ONLY alert_subscription
    ADD CONSTRAINT alert_subscription_address_id_fkey FOREIGN KEY (address_id) REFERENCES alert_address(address_id);
ALTER TABLE ONLY alert_subscription
    ADD CONSTRAINT alert_subscription_job_id_fkey FOREIGN KEY (job_id) REFERENCES job(job_id);
ALTER TABLE ONLY alert_subscription
    ADD CONSTRAINT alert_subscription_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id);
ALTER TABLE ONLY job_dependencie
    ADD CONSTRAINT job_dependencie_job_id_fkey FOREIGN KEY (job_id) REFERENCES job(job_id);
ALTER TABLE ONLY job_dependencie
    ADD CONSTRAINT job_dependencie_parent_job_id_fkey FOREIGN KEY (parent_job_id) REFERENCES job(job_id);
ALTER TABLE ONLY job_error
    ADD CONSTRAINT job_error_dm_load_id_fkey FOREIGN KEY (dm_load_id) REFERENCES job_log(dm_load_id);
ALTER TABLE ONLY job_error
    ADD CONSTRAINT job_error_job_id_fkey FOREIGN KEY (job_id) REFERENCES job(job_id);
ALTER TABLE ONLY job_executor_job_type
    ADD CONSTRAINT job_executor_job_type_job_executor_id_fkey FOREIGN KEY (job_executor_id) REFERENCES job_executor(job_executor_id);
ALTER TABLE ONLY job_executor_job_type
    ADD CONSTRAINT job_executor_job_type_job_type_id_fkey FOREIGN KEY (job_type_id) REFERENCES job_type(job_type_id);
ALTER TABLE ONLY job
    ADD CONSTRAINT job_job_type_id_fkey FOREIGN KEY (job_type_id) REFERENCES job_type(job_type_id);
ALTER TABLE ONLY job
    ADD CONSTRAINT job_job_type_id_fkey1 FOREIGN KEY (job_type_id) REFERENCES job_type(job_type_id);
ALTER TABLE ONLY job_log
    ADD CONSTRAINT job_log_job_id_fkey FOREIGN KEY (job_id) REFERENCES job(job_id);
ALTER TABLE ONLY job_log
    ADD CONSTRAINT job_log_load_id_fkey FOREIGN KEY (load_id) REFERENCES "load"(load_id);
ALTER TABLE ONLY job_log
    ADD CONSTRAINT job_log_status_id_fkey FOREIGN KEY (status_id) REFERENCES job_status(status_id);
ALTER TABLE ONLY job
    ADD CONSTRAINT job_parameter_list_id_fkey FOREIGN KEY (parameter_list_id) REFERENCES parameter_list(parameter_list_id);
ALTER TABLE ONLY job
    ADD CONSTRAINT job_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id);
ALTER TABLE ONLY job
    ADD CONSTRAINT job_project_id_fkey1 FOREIGN KEY (project_id) REFERENCES project(project_id);
ALTER TABLE ONLY job_schedule
    ADD CONSTRAINT job_schedule_job_id_fkey FOREIGN KEY (job_id) REFERENCES job(job_id);
ALTER TABLE ONLY parameter
    ADD CONSTRAINT parameter_parameter_list_id_fkey FOREIGN KEY (parameter_list_id) REFERENCES parameter_list(parameter_list_id);
ALTER TABLE ONLY server_executor
    ADD CONSTRAINT server_executor_job_executor_id_fkey FOREIGN KEY (job_executor_id) REFERENCES job_executor(job_executor_id);
ALTER TABLE ONLY server_executor
    ADD CONSTRAINT server_executor_job_executor_id_fkey1 FOREIGN KEY (job_executor_id) REFERENCES job_executor(job_executor_id);
ALTER TABLE ONLY server_executor
    ADD CONSTRAINT server_executor_server_id_fkey FOREIGN KEY (server_id) REFERENCES server(server_id);
ALTER TABLE ONLY server_executor
    ADD CONSTRAINT server_executor_server_id_fkey1 FOREIGN KEY (server_id) REFERENCES server(server_id);
ALTER TABLE ONLY server
    ADD CONSTRAINT server_status_id_fkey FOREIGN KEY (status_id) REFERENCES server_status(status_id);
GRANT ALL ON SCHEMA ${SCHEMA} TO ${OWNER};
</STATEMENT>
<STATEMENT EXECUTE="UPGRADE" VERSION="2">

</STATEMENT>
<STATEMENT  VERSION="1">
INSERT INTO JOB_EXECUTOR ( JOB_EXECUTOR_ID, CLASS_NAME ) VALUES ( 1, 'com.kni.etl.SQLJobExecutor'); 
INSERT INTO JOB_EXECUTOR ( JOB_EXECUTOR_ID, CLASS_NAME ) VALUES ( 2, 'com.kni.etl.OSJobExecutor'); 
INSERT INTO JOB_EXECUTOR ( JOB_EXECUTOR_ID, CLASS_NAME ) VALUES ( 3, 'com.kni.etl.ketl.KETLJobExecutor'); 
INSERT INTO JOB_EXECUTOR ( JOB_EXECUTOR_ID, CLASS_NAME ) VALUES ( 4, 'com.kni.etl.sessionizer.XMLSessionizeJobExecutor'); 
INSERT INTO JOB_TYPE ( JOB_TYPE_ID, DESCRIPTION, CLASS_NAME ) VALUES ( 0, 'EMPTYJOB', NULL); 
INSERT INTO JOB_TYPE ( JOB_TYPE_ID, DESCRIPTION, CLASS_NAME ) VALUES ( 1, 'SQL', 'com.kni.etl.SQLJob'); 
INSERT INTO JOB_TYPE ( JOB_TYPE_ID, DESCRIPTION, CLASS_NAME ) VALUES ( 2, 'OSJOB', 'com.kni.etl.OSJob'); 
INSERT INTO JOB_TYPE ( JOB_TYPE_ID, DESCRIPTION, CLASS_NAME ) VALUES ( 3, 'KETL', 'com.kni.etl.ketl.KETLJob'); 
INSERT INTO JOB_TYPE ( JOB_TYPE_ID, DESCRIPTION, CLASS_NAME ) VALUES ( 4, 'XMLSESSIONIZER', 'com.kni.etl.sessionizer.XMLSessionizeJob'); 
INSERT INTO JOB_EXECUTOR_JOB_TYPE ( JOB_EXECUTOR_ID, JOB_TYPE_ID ) VALUES ( 1, 1); 
INSERT INTO JOB_EXECUTOR_JOB_TYPE ( JOB_EXECUTOR_ID, JOB_TYPE_ID ) VALUES ( 2, 2); 
INSERT INTO JOB_EXECUTOR_JOB_TYPE ( JOB_EXECUTOR_ID, JOB_TYPE_ID ) VALUES ( 3, 3); 
INSERT INTO JOB_EXECUTOR_JOB_TYPE ( JOB_EXECUTOR_ID, JOB_TYPE_ID ) VALUES ( 4, 4);  
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '1', 'Executing'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '2', 'Pending Closure Failed'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '3', 'Finished'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '4', 'Waiting to be execut'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '5', 'Waiting for children'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '6', 'Failed'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '7', 'Pending Closure Finished'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '9', 'Pending Closure Cancelled'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '12', 'Waiting to be retried'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '14', 'Critical Failure Pause Load'); 
INSERT INTO JOB_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( '15', 'Paused'); 
INSERT INTO SERVER_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( 1, 'Active'); 
INSERT INTO SERVER_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( 2, 'Shutting Down'); 
INSERT INTO SERVER_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( 3, 'Shutdown'); 
INSERT INTO SERVER_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( 4, 'Paused'); 
INSERT INTO SERVER_STATUS ( STATUS_ID, STATUS_DESC ) VALUES ( 5, 'Server Killed'); 
</STATEMENT>
